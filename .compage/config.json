{"edges":{},"editor":{"mode":"Drag"},"nodes":{"node-26":{"id":"node-26","typeId":"node-type-rectangle-top-bottom","consumerData":{"nodeType":"node-type-rectangle-top-bottom","name":"DNSDNV","language":"ruby","restConfig":{"server":{"sqlDb":"","port":"8080","resources":[],"openApiFileYamlContent":"swagger: '2.0'\ninfo:\n  description: >-\n    This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nhost: petstore.swagger.io\nbasePath: /v2\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\nschemes:\n  - http\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          type: array\n          items:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n            default: available\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: >-\n        Muliple tags can be provided with comma seperated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          type: array\n          items:\n            type: string\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      consumes:\n        - application/x-www-form-urlencoded\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          type: integer\n          format: int64\n        - name: name\n          in: formData\n          description: Updated name of the pet\n          required: false\n          type: string\n        - name: status\n          in: formData\n          description: Updated status of the pet\n          required: false\n          type: string\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      consumes:\n        - multipart/form-data\n      produces:\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          type: integer\n          format: int64\n        - name: additionalMetadata\n          in: formData\n          description: Additional data to pass to server\n          required: false\n          type: string\n        - name: file\n          in: formData\n          description: file to upload\n          required: false\n          type: file\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/ApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      produces:\n        - application/json\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: order placed for purchasing the pet\n          required: true\n          schema:\n            $ref: '#/definitions/Order'\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid Order\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: >-\n        For valid response try integer IDs with value <= 5 or > 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          type: integer\n          maximum: 5\n          minimum: 1\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: >-\n        For valid response try integer IDs with value < 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          type: string\n          minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Created user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: string\n          headers:\n            X-Rate-Limit:\n              type: integer\n              format: int32\n              description: calls per hour allowed by the user\n            X-Expires-After:\n              type: string\n              format: date-time\n              description: date in UTC when toekn expires\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      produces:\n        - application/xml\n        - application/json\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          type: string\n        - in: body\n          name: body\n          description: Updated user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nsecurityDefinitions:\n  petstore_auth:\n    type: oauth2\n    authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n    flow: implicit\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  api_key:\n    type: apiKey\n    name: api_key\n    in: header\ndefinitions:\n  Order:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      petId:\n        type: integer\n        format: int64\n      quantity:\n        type: integer\n        format: int32\n      shipDate:\n        type: string\n        format: date-time\n      status:\n        type: string\n        description: Order Status\n        enum:\n          - placed\n          - approved\n          - delivered\n      complete:\n        type: boolean\n        default: false\n    xml:\n      name: Order\n  Category:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Category\n  User:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      username:\n        type: string\n      firstName:\n        type: string\n      lastName:\n        type: string\n      email:\n        type: string\n      password:\n        type: string\n      phone:\n        type: string\n      userStatus:\n        type: integer\n        format: int32\n        description: User Status\n    xml:\n      name: User\n  Tag:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Tag\n  Pet:\n    type: object\n    required:\n      - name\n      - photoUrls\n    properties:\n      id:\n        type: integer\n        format: int64\n      category:\n        $ref: '#/definitions/Category'\n      name:\n        type: string\n        example: doggie\n      photoUrls:\n        type: array\n        xml:\n          name: photoUrl\n          wrapped: true\n        items:\n          type: string\n      tags:\n        type: array\n        xml:\n          name: tag\n          wrapped: true\n        items:\n          $ref: '#/definitions/Tag'\n      status:\n        type: string\n        description: pet status in the store\n        enum:\n          - available\n          - pending\n          - sold\n    xml:\n      name: Pet\n  ApiResponse:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      type:\n        type: string\n      message:\n        type: string\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\n"},"template":"openAPI","framework":"ruby-sinatra"}},"diagramMakerData":{"position":{"x":342.6530669041523,"y":313.7095068462652},"size":{"width":65,"height":65},"selected":false}},"node-18":{"id":"node-18","typeId":"node-type-start-top-bottom","consumerData":{"nodeType":"node-type-start-top-bottom","name":"csc","language":"java","restConfig":{"server":{"sqlDb":"","port":"8080","resources":[],"openApiFileYamlContent":"---\n- hosts: webservers\n\n  vars:\n    http_port: 80\n    max_clients: 200\n\n  remote_user: root\n\n  tasks:\n  - name: ensure apache is at the latest version\n    yum:\n      name: httpd\n      state: latest\n\n  - name: write the apache config file\n    template:\n      src: /srv/httpd.j2\n      dest: /etc/httpd.conf\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: httpd\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: httpd\n        state: restarted"},"template":"openAPI","framework":"spring"}},"diagramMakerData":{"position":{"x":517.4276410998552,"y":288.1055883335189},"size":{"width":65,"height":65},"selected":false}},"node-b6":{"id":"node-b6","typeId":"node-type-end-top-bottom","consumerData":{"nodeType":"node-type-end-top-bottom","name":"fgudtftudu","language":"python","restConfig":{"server":{"sqlDb":"","port":"8080","resources":[],"openApiFileYamlContent":"swagger: '2.0'\ninfo:\n  description: >-\n    This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nhost: petstore.swagger.io\nbasePath: /v2\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\nschemes:\n  - http\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          type: array\n          items:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n            default: available\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: >-\n        Muliple tags can be provided with comma seperated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          type: array\n          items:\n            type: string\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      consumes:\n        - application/x-www-form-urlencoded\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          type: integer\n          format: int64\n        - name: name\n          in: formData\n          description: Updated name of the pet\n          required: false\n          type: string\n        - name: status\n          in: formData\n          description: Updated status of the pet\n          required: false\n          type: string\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      consumes:\n        - multipart/form-data\n      produces:\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          type: integer\n          format: int64\n        - name: additionalMetadata\n          in: formData\n          description: Additional data to pass to server\n          required: false\n          type: string\n        - name: file\n          in: formData\n          description: file to upload\n          required: false\n          type: file\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/ApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      produces:\n        - application/json\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: order placed for purchasing the pet\n          required: true\n          schema:\n            $ref: '#/definitions/Order'\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid Order\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: >-\n        For valid response try integer IDs with value <= 5 or > 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          type: integer\n          maximum: 5\n          minimum: 1\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: >-\n        For valid response try integer IDs with value < 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          type: string\n          minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Created user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: string\n          headers:\n            X-Rate-Limit:\n              type: integer\n              format: int32\n              description: calls per hour allowed by the user\n            X-Expires-After:\n              type: string\n              format: date-time\n              description: date in UTC when toekn expires\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      produces:\n        - application/xml\n        - application/json\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          type: string\n        - in: body\n          name: body\n          description: Updated user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nsecurityDefinitions:\n  petstore_auth:\n    type: oauth2\n    authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n    flow: implicit\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  api_key:\n    type: apiKey\n    name: api_key\n    in: header\ndefinitions:\n  Order:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      petId:\n        type: integer\n        format: int64\n      quantity:\n        type: integer\n        format: int32\n      shipDate:\n        type: string\n        format: date-time\n      status:\n        type: string\n        description: Order Status\n        enum:\n          - placed\n          - approved\n          - delivered\n      complete:\n        type: boolean\n        default: false\n    xml:\n      name: Order\n  Category:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Category\n  User:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      username:\n        type: string\n      firstName:\n        type: string\n      lastName:\n        type: string\n      email:\n        type: string\n      password:\n        type: string\n      phone:\n        type: string\n      userStatus:\n        type: integer\n        format: int32\n        description: User Status\n    xml:\n      name: User\n  Tag:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Tag\n  Pet:\n    type: object\n    required:\n      - name\n      - photoUrls\n    properties:\n      id:\n        type: integer\n        format: int64\n      category:\n        $ref: '#/definitions/Category'\n      name:\n        type: string\n        example: doggie\n      photoUrls:\n        type: array\n        xml:\n          name: photoUrl\n          wrapped: true\n        items:\n          type: string\n      tags:\n        type: array\n        xml:\n          name: tag\n          wrapped: true\n        items:\n          $ref: '#/definitions/Tag'\n      status:\n        type: string\n        description: pet status in the store\n        enum:\n          - available\n          - pending\n          - sold\n    xml:\n      name: Pet\n  ApiResponse:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      type:\n        type: string\n      message:\n        type: string\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\n"},"template":"openAPI","framework":"python-flask"}},"diagramMakerData":{"position":{"x":712.2400645664032,"y":284.7659467883781},"size":{"width":65,"height":65},"selected":false}},"node-dd":{"id":"node-dd","typeId":"node-type-start","consumerData":{"nodeType":"node-type-start","name":"fktjdccxh","language":"python","restConfig":{"server":{"sqlDb":"","port":"8080","resources":[],"openApiFileYamlContent":"---\n- hosts: webservers\n\n  vars:\n    http_port: 80\n    max_clients: 200\n\n  remote_user: root\n\n  tasks:\n  - name: ensure apache is at the latest version\n    yum:\n      name: httpd\n      state: latest\n\n  - name: write the apache config file\n    template:\n      src: /srv/httpd.j2\n      dest: /etc/httpd.conf\n    notify:\n    - restart apache\n\n  - name: ensure apache is running\n    service:\n      name: httpd\n      state: started\n\n  handlers:\n    - name: restart apache\n      service:\n        name: httpd\n        state: restarted"},"template":"openAPI","framework":"python-flask"}},"diagramMakerData":{"position":{"x":830.2407324947122,"y":279.19987754647667},"size":{"width":65,"height":65},"selected":false}},"node-66":{"id":"node-66","typeId":"node-type-end-top-bottom","consumerData":{"nodeType":"node-type-end-top-bottom"},"diagramMakerData":{"position":{"x":994.9963820549929,"y":308.1434376043638},"size":{"width":65,"height":65},"selected":false}},"node-7f":{"id":"node-7f","typeId":"node-type-end","consumerData":{"nodeType":"node-type-end"},"diagramMakerData":{"position":{"x":289.21880218189915,"y":428.37053322943336},"size":{"width":65,"height":65},"selected":false}},"node-83":{"id":"node-83","typeId":"node-type-dead","consumerData":{"nodeType":"node-type-dead"},"diagramMakerData":{"position":{"x":569.7486919737281,"y":419.4648224423912},"size":{"width":65,"height":65},"selected":false}},"node-2a":{"id":"node-2a","typeId":"node-type-circle","consumerData":{"nodeType":"node-type-circle","name":"Test","language":"go","restConfig":{"server":{"sqlDb":"SQLite","port":"6565","resources":[]},"template":"compage","framework":"go-gin-server"}},"diagramMakerData":{"position":{"x":182.35027273739286,"y":320.3887899365468},"size":{"width":65,"height":65},"selected":true}}},"panels":{"library":{"id":"library","position":{"x":0,"y":172},"size":{"width":35,"height":310},"positionAnchor":"TopLeft"},"tools":{"id":"tools","position":{"x":0,"y":172},"size":{"width":35,"height":310},"positionAnchor":"TopRight"}},"plugins":{},"potentialEdge":null,"potentialNode":null,"undoHistory":{"undoQueue":[{"action":{"type":"NODE_CREATE","payload":{"id":"node-2a","typeId":"node-type-circle","position":{"x":182.35027273739286,"y":320.3887899365468},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-circle"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-83","typeId":"node-type-dead","position":{"x":569.7486919737281,"y":419.4648224423912},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-dead"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-7f","typeId":"node-type-end","position":{"x":289.21880218189915,"y":428.37053322943336},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-end"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-66","typeId":"node-type-end-top-bottom","position":{"x":994.9963820549929,"y":308.1434376043638},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-end-top-bottom"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-dd","typeId":"node-type-start","position":{"x":830.2407324947122,"y":279.19987754647667},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-start"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-b6","typeId":"node-type-end-top-bottom","position":{"x":712.2400645664032,"y":284.7659467883781},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-end-top-bottom"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-18","typeId":"node-type-start-top-bottom","position":{"x":517.4276410998552,"y":288.1055883335189},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-start-top-bottom"}}}},{"action":{"type":"NODE_CREATE","payload":{"id":"node-26","typeId":"node-type-rectangle-top-bottom","position":{"x":342.6530669041523,"y":313.7095068462652},"size":{"width":65,"height":65},"consumerData":{"nodeType":"node-type-rectangle-top-bottom"}}}}],"redoQueue":[]},"workspace":{"scale":0.8983,"position":{"x":0,"y":0},"canvasSize":{"height":688,"width":1629.7730453747697},"viewContainerSize":{"height":618,"width":1139}}}